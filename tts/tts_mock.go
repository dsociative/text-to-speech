// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dsociative/text-to-speech/tts (interfaces: TTS)

// Package tts is a generated GoMock package.
package tts

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTTS is a mock of TTS interface
type MockTTS struct {
	ctrl     *gomock.Controller
	recorder *MockTTSMockRecorder
}

// MockTTSMockRecorder is the mock recorder for MockTTS
type MockTTSMockRecorder struct {
	mock *MockTTS
}

// NewMockTTS creates a new mock instance
func NewMockTTS(ctrl *gomock.Controller) *MockTTS {
	mock := &MockTTS{ctrl: ctrl}
	mock.recorder = &MockTTSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTTS) EXPECT() *MockTTSMockRecorder {
	return m.recorder
}

// TTS mocks base method
func (m *MockTTS) TTS(arg0 context.Context, arg1, arg2 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "TTS", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTS indicates an expected call of TTS
func (mr *MockTTSMockRecorder) TTS(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTS", reflect.TypeOf((*MockTTS)(nil).TTS), arg0, arg1, arg2)
}
